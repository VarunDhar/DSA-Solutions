class Solution {
public:
    //MST method
    int minCostConnectPoints(vector<vector<int>>& points) {
        int n = points.size();
        vector<int> vis(n,0);
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;

        vector<vector<int>> edges[n];
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                int md = abs(points[i][0]-points[j][0]) + abs(points[i][1]-points[j][1]);
                edges[i].push_back({md,j});
                edges[j].push_back({md,i});
            }
        }
        pq.push({0,0});
        int ans = 0;
        while(!pq.empty()){
            int node = pq.top().second;
            int wt = pq.top().first;
            pq.pop();
            
            if(!vis[node]){
                vis[node] = 1;
                ans += wt;
                for(auto it: edges[node]){
                    if(!vis[it[1]])
                        pq.push({it[0],it[1]});
                }
            }
            
        }
        return ans;
    }
};
