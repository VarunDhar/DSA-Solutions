class Solution{
  public:
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    long long cnt=0;
    void merge(long long a[], long long l, long long r)
    {
        long long part= (l+r)/2;
        
        if(l<r)
        {
            merge(a, l, part);
            merge(a, part+1, r);
            
            long long n1= part-l+1;
            long long n2= r-part;
            long long left[n1];
            long long right[n2];
            long long temp= l;
            for(auto i=0;i<n1;i++)
            {
                left[i]=a[temp];
                temp++;
            }
            for(auto j=0;j<n2;j++)
            {
                right[j]=a[temp];
                temp++;
            }
            
            temp=l;
            long long m,n;
            m=0;
            n=0;
            while(m<n1 and n<n2)
            {
                if(left[m]>right[n])
                {
                    cnt+= n1-m;
                    a[temp++]=right[n++];
                }
                else
                {
                    a[temp++]=left[m++];
                }
            }
            while(m<n1)
            {
                a[temp++]=left[m++];
            }
            while(n<n2)
            {
                a[temp++]=right[n++];
            }
            return;
            
        }
        else
        {
            return;
        }
    }
    long long int inversionCount(long long arr[], long long N)
    {
        merge(arr, 0, N-1);
        return cnt;
    }
