class Solution {
    vector<string> ansVector;
public:
    void fun(int i,int j,vector<string> &temp, string &s, unordered_set<string> &words){
        //i means starting index of character, j means right index of character of substr
        if(j==s.length()-1){
            if(words.find(s.substr(i))!=words.end()){
                temp.push_back(s.substr(i));
                string ans = "";
                for(int i=0;i<temp.size();i++){
                    if(i!=0)
                        ans+=" ";
                    ans+=temp[i];
                }
                ansVector.push_back(ans);
                temp.pop_back();
            }
            return;
        }
        else{
            string word = s.substr(i,j-i+1);
            int breakHere = 0;
            if(words.find(word)!=words.end()){
                temp.push_back(word);
                fun(j+1,j+1,temp,s,words);
                temp.pop_back();
            }
            fun(i,j+1,temp,s,words);
            return;
        }
    }
    vector<string> wordBreak(string s, vector<string>& wordDict) {
        unordered_set<string> words(wordDict.begin(),wordDict.end());
        vector<string> temp;
        fun(0,0,temp,s,words);
        return ansVector;
    }
};
