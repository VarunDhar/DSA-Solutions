bool comp(int a, int b)
{
    return (a < b);
}
int ninja(int n, vector<vector<int>> &points,vector<vector<int>> &dp,int index)
{
    if(n==0)
    {
        if(index==0)
            return max(points[n][1],points[n][2]);
        else if(index==1)
            return max(points[n][0],points[n][2]);
        else
            return max(points[n][0],points[n][1]);
    }
    
    else
    {
        if(index==3)
        {
            dp[n][3]=max(points[n][0]+ninja(n-1,points,dp,0),
                          points[n][1]+ninja(n-1,points,dp,1));
            return dp[n][3]=max(points[n][2]+ninja(n-1,points,dp,2), dp[n][3]);
        }
        else if(dp[n][index]!=-1)
        {
            return dp[n][index];
        }
        else if(index==0)
        {
            return dp[n][0]= max(points[n][1]+ninja(n-1,points,dp,1),
                          points[n][2]+ninja(n-1,points,dp,2));
        }
        else if(index==1)
        {
            return dp[n][1]=max(points[n][0]+ninja(n-1,points,dp,0),
                          points[n][2]+ninja(n-1,points,dp,2));
        }
        else
        {
            return dp[n][2]=max(points[n][0]+ninja(n-1,points,dp,0),
                          points[n][1]+ninja(n-1,points,dp,1));
        }
        
    }
}
int ninjaTraining(int n, vector<vector<int>> &points)
{
    vector<vector<int>> dp(n,{-1,-1,-1,-1});
    return ninja(n-1,points,dp,3);
    
}
